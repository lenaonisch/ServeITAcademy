//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FlexLabs.EntityFrameworkCore.Upsert {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("FlexLabs.EntityFrameworkCore.Upsert.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} must be an anonymous object initialiser.
        /// </summary>
        internal static string ArgumentMustBeAnAnonymousObjectInitialiser {
            get {
                return ResourceManager.GetString("ArgumentMustBeAnAnonymousObjectInitialiser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} must be an Initialiser of the TEntity type.
        /// </summary>
        internal static string ArgumentMustBeAnInitialiserOfTheTEntityType {
            get {
                return ResourceManager.GetString("ArgumentMustBeAnInitialiserOfTheTEntityType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t call {0} twice!.
        /// </summary>
        internal static string CantCallMethodTwice {
            get {
                return ResourceManager.GetString("CantCallMethodTwice", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t call {0} when {1} has been called, as they are mutually exclusive.
        /// </summary>
        internal static string CantCallMethodWhenMethodHasBeenCalledAsTheyAreMutuallyExclusive {
            get {
                return ResourceManager.GetString("CantCallMethodWhenMethodHasBeenCalledAsTheyAreMutuallyExclusive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Database provider not supported yet!.
        /// </summary>
        internal static string DatabaseProviderNotSupportedYet {
            get {
                return ResourceManager.GetString("DatabaseProviderNotSupportedYet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TEntity type must be mapped in your DbContext..
        /// </summary>
        internal static string EntityTypeMustBeMappedInDbContext {
            get {
                return ResourceManager.GetString("EntityTypeMustBeMappedInDbContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Match columns have to be properties of the TEntity class.
        /// </summary>
        internal static string MatchColumnsHaveToBePropertiesOfTheTEntityClass {
            get {
                return ResourceManager.GetString("MatchColumnsHaveToBePropertiesOfTheTEntityClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to See {0} for more details.
        /// </summary>
        internal static string SeeLinkForMoreDetails {
            get {
                return ResourceManager.GetString("SeeLinkForMoreDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Simplify the expression, or try a different one..
        /// </summary>
        internal static string SimplifyTheExpressionOrTryADifferentOne {
            get {
                return ResourceManager.GetString("SimplifyTheExpressionOrTryADifferentOne", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The update condition must be a comparison expression.
        /// </summary>
        internal static string TheUpdateConditionMustBeAComparisonExpression {
            get {
                return ResourceManager.GetString("TheUpdateConditionMustBeAComparisonExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This type of expression is not currently supported:.
        /// </summary>
        internal static string ThisTypeOfExpressionIsNotCurrentlySupported {
            get {
                return ResourceManager.GetString("ThisTypeOfExpressionIsNotCurrentlySupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown property {0}.
        /// </summary>
        internal static string UnknownProperty {
            get {
                return ResourceManager.GetString("UnknownProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} must be an Initialiser of the TEntity type.
        /// </summary>
        internal static string UpdaterMustBeAnInitialiserOfTheTEntityType {
            get {
                return ResourceManager.GetString("UpdaterMustBeAnInitialiserOfTheTEntityType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using autogenerated / identity keys as the upsert match excession is not supported. Pick a non generated unique key..
        /// </summary>
        internal static string UsingAutogeneratedIdentityKeysAsTheUpsertMatchExpressionIsNotSupportedPickANonGeneratedUniqueKey {
            get {
                return ResourceManager.GetString("UsingAutogeneratedIdentityKeysAsTheUpsertMatchExpressionIsNotSupportedPickANonGen" +
                        "eratedUniqueKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using conditional updates is not supported in MySQL due to database syntax limitations..
        /// </summary>
        internal static string UsingConditionalUpdatesIsNotSupportedInMySQLDueToDatabaseSyntaxLimitations {
            get {
                return ResourceManager.GetString("UsingConditionalUpdatesIsNotSupportedInMySQLDueToDatabaseSyntaxLimitations", resourceCulture);
            }
        }
    }
}
